set nocompatible

if !has('nvim')
    echo "You have to use Neovim"
    exit
endif

" Automatic reloading of .vimrc
autocmd! bufwritepost vimrc source ~/.nvimrc
autocmd! bufwritepost .nvimrc source %

" Reload file if it was changed
set autoread

" Set backspace behavior
set backspace=indent,eol,start

" Colors
set background=dark

" Indentation
set smartindent

set tabstop=4
set shiftwidth=4
set expandtab

autocmd FileType ruby setlocal tabstop=2
autocmd FileType ruby setlocal shiftwidth=2

" Show commands int bottom right corner
set showcmd

" Easy sorting of selected lines
vnoremap <Leader>s :sort<CR>

" Make files should use tabs instead of spaces
autocmd FileType make setlocal noexpandtab

" Cursor
set cursorline

" Bind Ctrl + [h,j,k,l] for quick window movement
map <c-h> <c-w>h
map <c-j> <c-w>j
map <c-k> <c-w>k
map <c-l> <c-w>l

" Bind move command
nnoremap ∆ :m .+1<CR>==
nnoremap ˚ :m .-2<CR>==
inoremap ∆ <Esc>:m .+1<CR>==gi
inoremap ˚ <Esc>:m .-2<CR>==gi
vnoremap ∆ :m '>+1<CR>gv=gv
vnoremap ˚ :m '<-2<CR>gv=gv

" Set mapleader to comma
let mapleader = ','

" Highlight searched word
set incsearch

" Ignore case
set ignorecase
set smartcase

" Show vertical line on 80 column
set colorcolumn=85

" GUI options
set guioptions+=LlRrb
set guioptions-=LlRrb

" GUI font
set guifont=Source\ Code\ Pro\ for\ Powerline:h12

" Display ruler on the right side of the status line at the bottom of the window
set ruler

" Set relative numbers with current line number on cursor line
set relativenumber
set number
" Switch to absolute numbers in Insert mode
autocmd InsertEnter * set number norelativenumber
" Switch back to relative numbers in Normal mode
autocmd InsertLeave * set number relativenumber

" Better indenting of code block
vnoremap < <gv
vnoremap > >gv

call plug#begin('~/.nvim/plugged')

" Vundle can manage itself
Plug 'gmarik/Vundle.vim'

" Library needed by some plugins
Plug 'L9'

" Fuzzy finder for files and buffers
Plug 'kien/ctrlp.vim'

" Quick navigation for files/folders in current folder
Plug 'scrooloose/nerdtree'

" Quick switching between source and header file
Plug 'a.vim'

" Check source code syntax
Plug 'scrooloose/syntastic'

" Easy managing for snippets
Plug 'SirVer/ultisnips'
Plug 'honza/vim-snippets'

" Autocompletion for quotes, parentheses etc
Plug 'Raimondi/delimitMate'

" Groovy syntax for .gradle files
Plug 'tfnico/vim-gradle'

" Python mode plugin for better indention, autocomplete etc
Plug 'klen/python-mode'

" Autocomplete
Plug 'Valloric/YouCompleteMe', { 'do': './install.sh --clang-completer' }

" Changes Vim working directory to project root
Plug 'airblade/vim-rooter'

" Displays tags in a window
Plug 'majutsushi/tagbar'

" Git wrapper
Plug 'tpope/vim-fugitive'

" Quick (un)comment line(s)
Plug 'scrooloose/nerdcommenter'

" Jellybeans
Plug 'nanotech/jellybeans.vim'

" Airline - like powerline
Plug 'bling/vim-airline'

" Dash app helper
Plug 'rizzatti/dash.vim'

call plug#end()

" Color scheme
colorscheme jellybeans

" Syntax highlighting
filetype off
filetype plugin indent on
syntax on

" Highlight trailing whitespaces
highlight ExtraWhitespace ctermbg=red
highlight ExtraWhitespace guibg=red
match ExtraWhitespace /\s\+$/

" Delimitmate config
let delimitMate_expand_cr = 1
imap <expr> <CR> pumvisible() ? "\<c-y>" : "<Plug>delimitMateCR"

" Turn off code folding from python-mode
let g:pymode_folding = 0
" Turn off python-mode breakpoints
let g:pymode_breakpoint = 0
" Turn off python-mode code checking (I am using syntastic)
let g:pymode_lint = 0
" Turn off python-mode rope
let g:pymode_rope = 0

" Ctrlp should ignore some hidden folders and binary/temp files
let g:ctrlp_custom_ignore = {
            \ 'dir':  '\v[\/]\.(git|hg|svn)$',
            \ 'file': '\v\.(pyc|swp|so|class|zip|o)$',
            \ }


" NERDTree
let NERDTreeIgnore = ['\.pyc$', '\.o$', '\.class$']
" Map Ctrl + x to open NERDTree file explorer
nnoremap <C-x> :NERDTreeToggle<CR>
inoremap <C-x> <Esc>:NERDTreeToggle<CR>

" Airline settings
let g:airline_powerline_fonts = 1
let g:airline_theme = 'jellybeans'
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#buffer_nr_show = 1
set laststatus=2

" Fugitive mapping
nmap <silent> <leader>gs :Gstatus<cr>
nmap <silent> <leader>gd :Gdiff<cr>
nmap <silent> <leader>gb :Gblame<cr>

" TagBar
nmap <F8> :TagbarOpenAutoClose<CR>

" Syntastic java
let g:syntastic_java_checkers = ['checkstyle', 'javac']
let g:syntastic_java_javac_config_file_enabled = 1

" Syntastic python
let g:syntastic_python_checkers = ['flake8']
let g:syntastic_python_flake8_args = '--ignore=E302 --max-line-length=85'

" Equal sizes of splits when window resize
au VimResized * :wincmd =

" Highlight trailing whitespaces
highlight ExtraWhitespace ctermbg=red
match ExtraWhitespace /\s\+$/
" Show trailing whitespace as dot
" Show tab character as >-
set list
set listchars=trail:·,tab:>-

" YouCompleteMe
let g:ycm_autoclose_preview_window_after_completion = 1
let g:ycm_autoclose_preview_window_after_insertion = 1
let g:ycm_global_ycm_extra_conf = '~/.nvim/.ycm_extra_conf.py'
let g:ycm_show_diagnostics_ui = 0 " Syntastics problem solver
let g:ycm_key_list_select_completion = ['<TAB>', '<Down>']

" Ultisnips
let g:UltiSnipsExpandTrigger = '<C-y>'
let g:UltiSnipsJumpForwardTrigger="<c-b>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>"

" Scroll faster
nnoremap <c-e> 5<c-e>
nnoremap <c-y> 5<c-y>

