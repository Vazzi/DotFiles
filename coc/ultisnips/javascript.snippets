# A valid snippet should starts with:
#
#		snippet trigger_word [ "description" [ options ] ]
#
# and end with:
#
#		endsnippet
#
# Snippet options:
#
#		b - Beginning of line.
#		i - In-word expansion.
#		w - Word boundary.
#		r - Regular expression
#		e - Custom context snippet
#		A - Snippet will be triggered automatically, when condition matches.
#
# Basic example:
#
#		snippet emitter "emitter properties" b
#		private readonly ${1} = new Emitter<$2>()
#		public readonly ${1/^_(.*)/$1/}: Event<$2> = this.$1.event
#		endsnippet
#
# Online reference: https://github.com/SirVer/ultisnips/blob/master/doc/UltiSnips.txt

snippet rafc "React arrow function component" b
import React from 'react';

/**
 * ${1} component
 * ${2}
 *
 * @returns {React} React element
 */
const ${3} = () => {
	return (
	${4}
	);
};

export default ${3};
endsnippet

snippet rafcc "React arrow function component with redux connect" b
import React from 'react';
import { connect } from 'react-redux';

/**
 * ${1} component
 * ${2}
 *
 * @returns {React} React element
 */
const ${3} = () => {
	return (
	${4}
	);
};

const mapStateToProps = (state) => ({

});

const mapDispatchToProps = (dispatch) => ({

});

export default connect(mapStateToProps, mapDispatchToProps)(${3});
endsnippet

snippet lmf "Messages file for localizaon" b
import { defineMessages } from 'react-intl';

const messages = defineMessages({
  ${1}: {
    id: '${2}',
    description: '${3}'
  }
});

export default messages;
endsnippet

snippet lmo "Messages object for localization"
${1}: {
  id: '${2}',
  description: '${3}'
}
endsnippet

snippet trc "Test react component" b
import React from 'react';
import { shallow } from 'enzyme';

import ${1} from './${1}';

describe('<${1} /> component', () => {
  let wrapper;

  beforeEach(() => {
    wrapper = shallow(<${1} />);
  });

  describe('renders', () => {
    ${2}
  });
});
endsnippet

snippet trcp "Test react component with props" b
import React from 'react';
import { shallow } from 'enzyme';

import ${1} from './${1}';

describe('<${1} /> component', () => {
  let wrapper;
  let props;

  beforeEach(() => {
    props = {
      ${2}
    }

    wrapper = shallow(<${1} {...props} />);
  });

  describe('renders', () => {
    ${3}
  });
});
endsnippet

snippet te "Test except"
it('${1}', () => {
  expect(${2});
});
endsnippet

snippet td "Test describe"
describe('${1}', () => {
  it('${2}', () => {
    expect(${3});
  });
});
endsnippet

snippet imui "Import Material UI component" bA
import ${1} from '@mui/material/${1}';
endsnippet

snippet jsdrp "JsDoc react param of props" A
@param {object} props React component props
* @param {${1}} props.${2}
endsnippet

snippet jsdp "JsDoc param" A
@param {${1}} props.${2}
endsnippet
